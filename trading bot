import numpy as np
import pandas as pd
import yfinance as yf
import datetime as dt

# Parameters
ticker = 'AAPL'  # Stock symbol
short_window = 40  # Short moving average window
long_window = 100  # Long moving average window
start_date = '2023-01-01'  # Start date for historical data
end_date = dt.datetime.today().strftime('%Y-%m-%d')  # Today's date
initial_balance = 10000  # Starting capital in USD

# Fetch historical data
data = yf.download(ticker, start=start_date, end=end_date)

# Calculate moving averages
data['SMA_short'] = data['Close'].rolling(window=short_window, min_periods=1).mean()
data['SMA_long'] = data['Close'].rolling(window=long_window, min_periods=1).mean()

# Initialize signals
data['Signal'] = 0
data['Signal'][short_window:] = np.where(data['SMA_short'][short_window:] > data['SMA_long'][short_window:], 1, 0)

# Generate trading orders
data['Position'] = data['Signal'].diff()

# Simulate trading
balance = initial_balance
shares = 0
for i in range(len(data)):
    if data['Position'][i] == 1:  # Buy signal
        shares = balance // data['Close'][i]
        balance -= shares * data['Close'][i]
        print(f"Buying {shares} shares at {data['Close'][i]:.2f} on {data.index[i].date()}")
    elif data['Position'][i] == -1:  # Sell signal
        balance += shares * data['Close'][i]
        print(f"Selling {shares} shares at {data['Close'][i]:.2f} on {data.index[i].date()}")
        shares = 0

# Final balance and profit calculation
final_balance = balance + shares * data['Close'].iloc[-1]
profit = final_balance - initial_balance
print(f"\nFinal balance: ${final_balance:.2f}")
print(f"Profit: ${profit:.2f}")

# Optional: Plotting the results
import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
plt.plot(data['Close'], label='Close Price')
plt.plot(data['SMA_short'], label=f'{short_window}-Day SMA')
plt.plot(data['SMA_long'], label=f'{long_window}-Day SMA')
plt.scatter(data.index[data['Position'] == 1], data['Close'][data['Position'] == 1], marker='^', color='g', label='Buy Signal', alpha=1)
plt.scatter(data.index[data['Position'] == -1], data['Close'][data['Position'] == -1], marker='v', color='r', label='Sell Signal', alpha=1)
plt.title(f'{ticker} Price and Moving Averages')
plt.legend()
plt.show()
